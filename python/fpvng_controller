#!/usr/bin/env python3

import os
import sys

# Setup some paths based on the directory that this script was run frum.
root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Add the library directory to the LD_LIBRARY_PATH environement variable.
lib_dir = os.path.join(root_dir, "lib")
# Add the bin directory to PATH
bin_dir = os.path.join(root_dir, "bin")
if 'LD_LIBRARY_PATH' not in os.environ:
    os.environ['LD_LIBRARY_PATH'] = lib_dir
else:
    os.environ['LD_LIBRARY_PATH'] += ":" + lib_dir
os.environ['PATH'] += ":" + bin_dir
if 'RE_EXECED' not in os.environ:
    try:
        os.environ['RE_EXECED'] = "1"
        os.execv(sys.argv[0], sys.argv)
    except Exception as exc:
        print('Failed re-exec:', exc)
        sys.exit(1)

# Add the python directory to the python path
python_dir = os.path.join(root_dir, "lib/python" + str(sys.version_info.major) + \
                          "." + str(sys.version_info.minor) + "/site-packages")
sys.path.append(python_dir)

import io
import time
import queue
import argparse
import signal
import logging
import logging.handlers
import configparser
import multiprocessing as mp

from wifibroadcast import camera, telemetry
#import transmitter, utp_relay

# Define an exit handler to do a graceful shutdown
def exit_handler(sig, frame):
    sys.exit()

if __name__ == '__main__':

    # The config filename should be the first and only command line option
    if len(sys.argv) != 2:
        sys.stderr.write("Usage: " + sys.argv[0] + " <config file>\n")
        exit(1)
    config_filename = sys.argv[1]

    # Read the config file
    config = configparser.ConfigParser()
    config['global'] = {
        'loglevel': 'error',
        'video_width': 10000,
        'video_height': 10000,
        'fps': 60,
        'bitrate': 3000000,
        'quality': 20,
        'inline_headers': True,
        'intra_period': 5,
        'prefer_picam': True,
        'fec_ratio': 0,
        'telemetry_uart': '',
        'rc_host': '127.0.0.1',
        'rc_port': 15441
    }
    try:
        config.read(config_filename)
    except:
        print("Error reading the configuration file: " + config_filename)
        exit

    # Configure the logger
    log_level = getattr(logging, config['global'].get('loglevel').upper())
    if not isinstance(log_level, int):
        print("Invalid log level: %s - setting to info" % (args.loglevel))
        log_level = logging.INFO
    logger = logging.getLogger('fpvng_controller')
    logging.basicConfig(level=log_level, format="%(asctime)s %(levelname)s: %(message)s", datefmt="%H:%M:%S",
                        handlers = [logging.handlers.SysLogHandler(address = "/dev/log")])

    # Setup an exit handler to gracefully exit
    signal.signal(signal.SIGINT, exit_handler)

    # Try to start the camera
    cam = camera.CameraProcess(width=int(config['global'].get('video_width')),
                               height=int(config['global'].get('video_height')),
                               fps=int(config['global'].get('fps')),
                               bitrate=int(config['global'].get('bitrate')),
                               quality=int(config['global'].get('quality')),
                               inline_headers=bool(config['global'].get('inline_headers')),
                               intra_period=int(config['global'].get('intra_period')),
                               prefer_picam=bool(config['global'].get('prefer_picam')),
                               fec_ratio=float(config['global'].get('fec_ratio')))
    if cam.start():
        air_side = True
        logging.info("Camera found. Running as Air side.")
    else:
        air_side = False
        logging.info("Camera NOT found. Running as Ground side.")

    # Start the telemetry parsers / forwarders
    # telem = None
    # telem_uart = config['global'].get('telemetry_uart')
    # rc_host = config['global'].get('rc_host')
    # rc_port = int(config['global'].get('rc_port'))
    # if telem_uart and air_side and 0:
    #     telem = telemetry.SerialTelemetryRx(uart=telem_uart, baudrate=115200, \
    #                                         rc_host=rc_host, rc_port=rc_port)
    # else:
    #     telem = None

    # Start the link status receiver
    # if air_side:
    #     status = telemetry.UDPStatusRx(host="127.0.0.1", port=5801)
    # else:
    #     status = telemetry.UDPStatusRx(host="127.0.0.1", port=5800)

    # Start the transmitter reader interface
    # if not air_side:
    #     trans = transmitter.Transmitter()
    # else:
    #     trans = None

    # Start the UDP relay threads
    # tether = udp_relay.USBTetherRelay()

    # Join with the processing threads before shutting down
    # tether.join()
    # status.join()
    # if trans:
    #     trans.join()
    # if telem:
    #     telem.join()
    cam.join()
